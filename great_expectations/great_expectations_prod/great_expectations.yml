# Welcome to Great Expectations! Always know what to expect from your data.
#
# Here you can define datasources, batch kwargs generators, integrations and
# more. This file is intended to be committed to your repo. For help with
# configuration please:
#   - Read our docs: https://docs.greatexpectations.io/docs/guides/connecting_to_your_data/connect_to_data_overview/#2-configure-your-datasource
#   - Join our slack channel: http://greatexpectations.io/slack

# config_version refers to the syntactic version of this config file, and is used in maintaining backwards compatibility
# It is auto-generated and usually does not need to be changed.
config_version: 3.0

# Datasources tell Great Expectations where your data lives and how to get it.
# You can use the CLI command `great_expectations datasource new` to help you
# add a new datasource. Read more at https://docs.greatexpectations.io/docs/guides/connecting_to_your_data/connect_to_data_overview
datasources:
  hs_prod_warehouse:
    module_name: great_expectations.datasource
    class_name: Datasource
    data_connectors:
      default_runtime_data_connector_name:
        module_name: great_expectations.datasource.data_connector
        class_name: RuntimeDataConnector
        batch_identifiers:
          - default_identifier_name
      default_inferred_data_connector_name:
        module_name: great_expectations.datasource.data_connector
        class_name: InferredAssetSqlDataConnector
        introspection_directives:
          schema_name: public
        include_schema_name: true
      default_configured_data_connector_name:
        module_name: great_expectations.datasource.data_connector
        class_name: ConfiguredAssetSqlDataConnector
        assets:
          leads_data_v3:
            module_name: great_expectations.datasource.data_connector.asset
            class_name: Asset
            schema_name: public
    execution_engine:
      module_name: great_expectations.execution_engine
      class_name: SqlAlchemyExecutionEngine
      credentials: ${hs_prod_warehouse_creds}

config_variables_file_path: config/config_variables.yml

# The plugins_directory will be added to your python path for custom modules
# used to override and extend Great Expectations.
plugins_directory: plugins/

stores:
# Stores are configurable places to store things like Expectations, Validations
# Data Docs, and more. These are for advanced users only - most users can simply
# leave this section alone.
#
# Three stores are required: expectations, validations, and
# evaluation_parameters, and must exist with a valid store entry. Additional
# stores can be configured for uses such as data_docs, etc.
  expectations_store:
    class_name: ExpectationsStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      base_directory: expectations/

  validations_store:
    class_name: ValidationsStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      base_directory: uncommitted/validations/

  evaluation_parameter_store:
    class_name: EvaluationParameterStore

  checkpoint_store:
    class_name: CheckpointStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      suppress_store_backend_id: true
      base_directory: checkpoints/

  profiler_store:
    class_name: ProfilerStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      suppress_store_backend_id: true
      base_directory: profilers/

  metric_store:
    class_name: MetricStore
    store_backend:
      class_name: DatabaseStoreBackend
      credentials: ${metric_store_creds}

  sql_queries_store:
    class_name: SqlAlchemyQueryStore
    store_backend:
      class_name: InMemoryStoreBackend
    credentials: ${hs_prod_warehouse_creds}
    queries:
      last_row_count:
        query: "SELECT (value::json->>'value')::int as value 
        FROM public.ge_metrics where metric_name = 'expect_table_row_count_to_be_between.result.observed_value' 
        AND run_time::timestamp < CURRENT_TIMESTAMP - INTERVAL '3 hours' 
        order by run_time desc limit 1"
        return_type: scalar

      current_row_count:
        query: "SELECT (value::json->>'value')::int as value 
        FROM public.ge_metrics where metric_name = 'expect_table_row_count_to_be_between.result.observed_value' 
        order by run_time desc limit 1"
        return_type: scalar

expectations_store_name: expectations_store
validations_store_name: validations_store
evaluation_parameter_store_name: evaluation_parameter_store
checkpoint_store_name: checkpoint_store





data_docs_sites:
  # Data Docs make it simple to visualize data quality in your project. These
  # include Expectations, Validations & Profiles. The are built for all
  # Datasources from JSON artifacts in the local repo including validations &
  # profiles from the uncommitted directory. Read more at https://docs.greatexpectations.io/docs/terms/data_docs
#  local_site:
#    class_name: SiteBuilder
#    show_how_to_buttons: true
#    store_backend:
#      class_name: TupleFilesystemStoreBackend
#      base_directory: uncommitted/data_docs/local_site/
#    site_index_builder:
#      class_name: DefaultSiteIndexBuilder
  S3_site: # this is a user-selected name - you may select your own
    class_name: SiteBuilder
    store_backend:
      class_name: TupleS3StoreBackend
      bucket: mdp-sandbox-bucket
      prefix: data-docs.homestory/
    site_index_builder:
      class_name: DefaultSiteIndexBuilder

anonymous_usage_statistics:
  enabled: true
  data_context_id: a26bbe74-03ba-4421-b085-678923829f54
notebooks:
include_rendered_content:
  expectation_suite: true
  expectation_validation_result: true
  globally: true
